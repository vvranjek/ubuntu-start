Xtended Interrupt Mode Enable bit 3 position. */
#define LCD_XIME4_bm  (1<<7)  /* eXtended Interrupt Mode Enable bit 4 mask. */
#define LCD_XIME4_bp  7  /* eXtended Interrupt Mode Enable bit 4 position. */

#define LCD_FCINTLVL_gm  0x03  /* Interrupt Level group mask. */
#define LCD_FCINTLVL_gp  0  /* Interrupt Level group position. */
#define LCD_FCINTLVL0_bm  (1<<0)  /* Interrupt Level bit 0 mask. */
#define LCD_FCINTLVL0_bp  0  /* Interrupt Level bit 0 position. */
#define LCD_FCINTLVL1_bm  (1<<1)  /* Interrupt Level bit 1 mask. */
#define LCD_FCINTLVL1_bp  1  /* Interrupt Level bit 1 position. */

/* LCD.INTFLAG  bit masks and bit positions */
#define LCD_FCIF_bm  0x01  /* LCD Frame Completed Interrupt Flag bit mask. */
#define LCD_FCIF_bp  0  /* LCD Frame Completed Interrupt Flag bit position. */

/* LCD.CTRLD  bit masks and bit positions */
#define LCD_BLINKEN_bm  0x08  /* Blink Enable bit mask. */
#define LCD_BLINKEN_bp  3  /* Blink Enable bit position. */

#define LCD_BLINKRATE_gm  0x03  /* LCD Blink Rate group mask. */
#define LCD_BLINKRATE_gp  0  /* LCD Blink Rate group position. */
#define LCD_BLINKRATE0_bm  (1<<0)  /* LCD Blink Rate bit 0 mask. */
#define LCD_BLINKRATE0_bp  0  /* LCD Blink Rate bit 0 position. */
#define LCD_BLINKRATE1_bm  (1<<1)  /* LCD Blink Rate bit 1 mask. */
#define LCD_BLINKRATE1_bp  1  /* LCD Blink Rate bit 1 position. */

/* LCD.CTRLE  bit masks and bit positions */
#define LCD_BPS1_gm  0xF0  /* Blink Pixel Selection 1 group mask. */
#define LCD_BPS1_gp  4  /* Blink Pixel Selection 1 group position. */
#define LCD_BPS10_bm  (1<<4)  /* Blink Pixel Selection 1 bit 0 mask. */
#define LCD_BPS10_bp  4  /* Blink Pixel Selection 1 bit 0 position. */
#define LCD_BPS11_bm  (1<<5)  /* Blink Pixel Selection 1 bit 1 mask. */
#define LCD_BPS11_bp  5  /* Blink Pixel Selection 1 bit 1 position. */
#define LCD_BPS12_bm  (1<<6)  /* Blink Pixel Selection 1 bit 2 mask. */
#define LCD_BPS12_bp  6  /* Blink Pixel Selection 1 bit 2 position. */
#define LCD_BPS13_bm  (1<<7)  /* Blink Pixel Selection 1 bit 3 mask. */
#define LCD_BPS13_bp  7  /* Blink Pixel Selection 1 bit 3 position. */

#define LCD_BPS0_gm  0x0F  /* Blink Pixel Selection 0 group mask. */
#define LCD_BPS0_gp  0  /* Blink Pixel Selection 0 group position. */
#define LCD_BPS00_bm  (1<<0)  /* Blink Pixel Selection 0 bit 0 mask. */
#define LCD_BPS00_bp  0  /* Blink Pixel Selection 0 bit 0 position. */
#define LCD_BPS01_bm  (1<<1)  /* Blink Pixel Selection 0 bit 1 mask. */
#define LCD_BPS01_bp  1  /* Blink Pixel Selection 0 bit 1 position. */
#define LCD_BPS02_bm  (1<<2)  /* Blink Pixel Selection 0 bit 2 mask. */
#define LCD_BPS02_bp  2  /* Blink Pixel Selection 0 bit 2 position. */
#define LCD_BPS03_bm  (1<<3)  /* Blink Pixel Selection 0 bit 3 mask. */
#define LCD_BPS03_bp  3  /* Blink Pixel Selection 0 bit 3 position. */

/* LCD.CTRLF  bit masks and bit positions */
#define LCD_FCONT_gm  0x3F  /* Fine Contrast group mask. */
#define LCD_FCONT_gp  0  /* Fine Contrast group position. */
#define LCD_FCONT0_bm  (1<<0)  /* Fine Contrast bit 0 mask. */
#define LCD_FCONT0_bp  0  /* Fine Contrast bit 0 position. */
#define LCD_FCONT1_bm  (1<<1)  /* Fine Contrast bit 1 mask. */
#define LCD_FCONT1_bp  1  /* Fine Contrast bit 1 position. */
#define LCD_FCONT2_bm  (1<<2)  /* Fine Contrast bit 2 mask. */
#define LCD_FCONT2_bp  2  /* Fine Contrast bit 2 position. */
#define LCD_FCONT3_bm  (1<<3)  /* Fine Contrast bit 3 mask. */
#define LCD_FCONT3_bp  3  /* Fine Contrast bit 3 position. */
#define LCD_FCONT4_bm  (1<<4)  /* Fine Contrast bit 4 mask. */
#define LCD_FCONT4_bp  4  /* Fine Contrast bit 4 position. */
#define LCD_FCONT5_bm  (1<<5)  /* Fine Contrast bit 5 mask. */
#define LCD_FCONT5_bp  5  /* Fine Contrast bit 5 position. */

/* LCD.CTRLG  bit masks and bit positions */
#define LCD_TDG_gm  0xC0  /* Type of Digit group mask. */
#define LCD_TDG_gp  6  /* Type of Digit group position. */
#define LCD_TDG0_bm  (1<<6)  /* Type of Digit bit 0 mask. */
#define LCD_TDG0_bp  6  /* Type of Digit bit 0 position. */
#define LCD_TDG1_bm  (1<<7)  /* Type of Digit bit 1 mask. */
#define LCD_TDG1_bp  7  /* Type of Digit bit 1 position. */

#define LCD_STSEG_gm  0x3F  /* Start Segment group mask. */
#define LCD_STSEG_gp  0  /* Start Segment group position. */
#define LCD_STSEG0_bm  (1<<0)  /* Start Segment bit 0 mask. */
#define LCD_STSEG0_bp  0  /* Start Segment bit 0 position. */
#define LCD_STSEG1_bm  (1<<1)  /* Start Segment bit 1 mask. */
#define LCD_STSEG1_bp  1  /* Start Segment bit 1 position. */
#define LCD_STSEG2_bm  (1<<2)  /* Start Segment bit 2 mask. */
#define LCD_STSEG2_bp  2  /* Start Segment bit 2 position. */
#define LCD_STSEG3_bm  (1<<3)  /* Start Segment bit 3 mask. */
#define LCD_STSEG3_bp  3  /* Start Segment bit 3 position. */
#define LCD_STSEG4_bm  (1<<4)  /* Start Segment bit 4 mask. */
#define LCD_STSEG4_bp  4  /* Start Segment bit 4 position. */
#define LCD_STSEG5_bm  (1<<5)  /* Start Segment bit 5 mask. */
#define LCD_STSEG5_bp  5  /* Start Segment bit 5 position. */

/* LCD.CTRLH  bit masks and bit positions */
#define LCD_DEC_bm  0x80  /* Decrement of Start Segment bit mask. */
#define LCD_DEC_bp  7  /* Decrement of Start Segment bit position. */

#define LCD_DCODE_gm  0x7F  /* Display Code group mask. */
#define LCD_DCODE_gp  0  /* Display Code group position. */
#define LCD_DCODE0_bm  (1<<0)  /* Display Code bit 0 mask. */
#define LCD_DCODE0_bp  0  /* Display Code bit 0 position. */
#define LCD_DCODE1_bm  (1<<1)  /* Display Code bit 1 mask. */
#define LCD_DCODE1_bp  1  /* Display Code bit 1 position. */
#define LCD_DCODE2_bm  (1<<2)  /* Display Code bit 2 mask. */
#define LCD_DCODE2_bp  2  /* Display Code bit 2 position. */
#define LCD_DCODE3_bm  (1<<3)  /* Display Code bit 3 mask. */
#define LCD_DCODE3_bp  3  /* Display Code bit 3 position. */
#define LCD_DCODE4_bm  (1<<4)  /* Display Code bit 4 mask. */
#define LCD_DCODE4_bp  4  /* Display Code bit 4 position. */
#define LCD_DCODE5_bm  (1<<5)  /* Display Code bit 5 mask. */
#define LCD_DCODE5_bp  5  /* Display Code bit 5 position. */
#define LCD_DCODE6_bm  (1<<6)  /* Display Code bit 6 mask. */
#define LCD_DCODE6_bp  6  /* Display Code bit 6 position. */

/* FUSE - Fuses and Lockbits */
/* NVM_FUSES.FUSEBYTE0  bit masks and bit positions */
#define NVM_FUSES_JTAGUSERID_gm  0xFF  /* JTAG User ID group mask. */
#define NVM_FUSES_JTAGUSERID_gp  0  /* JTAG User ID group position. */
#define NVM_FUSES_JTAGUSERID0_bm  (1<<0)  /* JTAG User ID bit 0 mask. */
#define NVM_FUSES_JTAGUSERID0_bp  0  /* JTAG User ID bit 0 position. */
#define NVM_FUSES_JTAGUSERID1_bm  (1<<1)  /* JTAG User ID bit 1 mask. */
#define NVM_FUSES_JTAGUSERID1_bp  1  /* JTAG User ID bit 1 position. */
#define NVM_FUSES_JTAGUSERID2_bm  (1<<2)  /* JTAG User ID bit 2 mask. */
#define NVM_FUSES_JTAGUSERID2_bp  2  /* JTAG User ID bit 2 position. */
#define NVM_FUSES_JTAGUSERID3_bm  (1<<3)  /* JTAG User ID bit 3 mask. */
#define NVM_FUSES_JTAGUSERID3_bp  3  /* JTAG User ID bit 3 position. */
#define NVM_FUSES_JTAGUSERID4_bm  (1<<4)  /* JTAG User ID bit 4 mask. */
#define NVM_FUSES_JTAGUSERID4_bp  4  /* JTAG User ID bit 4 position. */
#define NVM_FUSES_JTAGUSERID5_bm  (1<<5)  /* JTAG User ID bit 5 mask. */
#define NVM_FUSES_JTAGUSERID5_bp  5  /* JTAG User ID bit 5 position. */
#define NVM_FUSES_JTAGUSERID6_bm  (1<<6)  /* JTAG User ID bit 6 mask. */
#define NVM_FUSES_JTAGUSERID6_bp  6  /* JTAG User ID bit 6 position. */
#define NVM_FUSES_JTAGUSERID7_bm  (1<<7)  /* JTAG User ID bit 7 mask. */
#define NVM_FUSES_JTAGUSERID7_bp  7  /* JTAG User ID bit 7 position. */

/* NVM_FUSES.FUSEBYTE1  bit masks and bit positions */
#define NVM_FUSES_WDWP_gm  0xF0  /* Watchdog Window Timeout Period group mask. */
#define NVM_FUSES_WDWP_gp  4  /* Watchdog Window Timeout Period group position. */
#define NVM_FUSES_WDWP0_bm  (1<<4)  /* Watchdog Window Timeout Period bit 0 mask. */
#define NVM_FUSES_WDWP0_bp  4  /* Watchdog Window Timeout Period bit 0 position. */
#define NVM_FUSES_WDWP1_bm  (1<<5)  /* Watchdog Window Timeout Period bit 1 mask. */
#define NVM_FUSES_WDWP1_bp  5  /* Watchdog Window Timeout Period bit 1 position. */
#define NVM_FUSES_WDWP2_bm  (1<<6)  /* Watchdog Window Timeout Period bit 2 mask. */
#define NVM_FUSES_WDWP2_bp  6  /* Watchdog Window Timeout Period bit 2 position. */
#define NVM_FUSES_WDWP3_bm  (1<<7)  /* Watchdog Window Timeout Period bit 3 mask. */
#define NVM_FUSES_WDWP3_bp  7  /* Watchdog Window Timeout Period bit 3 position. */

#define NVM_FUSES_WDP_gm  0x0F  /* Watchdog Timeout Period group mask. */
#define NVM_FUSES_WDP_gp  0  /* Watchdog Timeout Period group position. */
#define NVM_FUSES_WDP0_bm  (1<<0)  /* Watchdog Timeout Period bit 0 mask. */
#define NVM_FUSES_WDP0_bp  0  /* Watchdog Timeout Period bit 0 position. */
#define NVM_FUSES_WDP1_bm  (1<<1)  /* Watchdog Timeout Period bit 1 mask. */
#define NVM_FUSES_WDP1_bp  1  /* Watchdog Timeout Period bit 1 position. */
#define NVM_FUSES_WDP2_bm  (1<<2)  /* Watchdog Timeout Period bit 2 mask. */
#define NVM_FUSES_WDP2_bp  2  /* Watchdog Timeout Period bit 2 position. */
#define NVM_FUSES_WDP3_bm  (1<<3)  /* Watchdog Timeout Period bit 3 mask. */
#define NVM_FUSES_WDP3_bp  3  /* Watchdog Timeout Period bit 3 position. */

/* NVM_FUSES.FUSEBYTE2  bit masks and bit positions */
#define NVM_FUSES_BOOTRST_bm  0x40  /* Boot Loader Section Reset Vector bit mask. */
#define NVM_FUSES_BOOTRST_bp  6  /* Boot Loader Section Reset Vector bit position. */

#define NVM_FUSES_TOSCSEL_bm  0x20  /* Timer Oscillator pin location bit mask. */
#define NVM_FUSES_TOSCSEL_bp  5  /* Timer Oscillator pin location bit position. */

#define NVM_FUSES_BODPD_gm  0x03  /* BOD Operation in Power-Down Mode group mask. */
#define NVM_FUSES_BODPD_gp  0  /* BOD Operation in Power-Down Mode group position. */
#define NVM_FUSES_BODPD0_bm  (1<<0)  /* BOD Operation in Power-Down Mode bit 0 mask. */
#define NVM_FUSES_BODPD0_bp  0  /* BOD Operation in Power-Down Mode bit 0 position. */
#define NVM_FUSES_BODPD1_bm  (1<<1)  /* BOD Operation in Power-Down Mode bit 1 mask. */
#define NVM_FUSES_BODPD1_bp  1  /* BOD Operation in Power-Down Mode bit 1 position. */

/* NVM_FUSES.FUSEBYTE4  bit masks and bit positions */
#define NVM_FUSES_RSTDISBL_bm  0x10  /* External Reset Disable bit mask. */
#define NVM_FUSES_RSTDISBL_bp  4  /* External Reset Disable bit position. */

#define NVM_FUSES_SUT_gm  0x0C  /* Start-up Time group mask. */
#define NVM_FUSES_SUT_gp  2  /* Start-up Time group position. */
#define NVM_FUSES_SUT0_bm  (1<<2)  /* Start-up Time bit 0 mask. */
#define NVM_FUSES_SUT0_bp  2  /* Start-up Time bit 0 position. */
#define NVM_FUSES_SUT1_bm  (1<<3)  /* Start-up Time bit 1 mask. */
#define NVM_FUSES_SUT1_bp  3  /* Start-up Time bit 1 position. */

#define NVM_FUSES_WDLOCK_bm  0x02  /* Watchdog Timer Lock bit mask. */
#define NVM_FUSES_WDLOCK_bp  1  /* Watchdog Timer Lock bit position. */

#define NVM_FUSES_JTAGEN_bm  0x01  /* JTAG Interface Enable bit mask. */
#define NVM_FUSES_JTAGEN_bp  0  /* JTAG Interface Enable bit position. */

/* NVM_FUSES.FUSEBYTE5  bit masks and bit positions */
#define NVM_FUSES_BODACT_gm  0x30  /* BOD Operation in Active Mode group mask. */
#define NVM_FUSES_BODACT_gp  4  /* BOD Operation in Active Mode group position. */
#define NVM_FUSES_BODACT0_bm  (1<<4)  /* BOD Operation in Active Mode bit 0 mask. */
#define NVM_FUSES_BODACT0_bp  4  /* BOD Operation in Active Mode bit 0 position. */
#define NVM_FUSES_BODACT1_bm  (1<<5)  /* BOD Operation in Active Mode bit 1 mask. */
#define NVM_FUSES_BODACT1_bp  5  /* BOD Operation in Active Mode bit 1 position. */

#define NVM_FUSES_EESAVE_bm  0x08  /* Preserve EEPROM Through Chip Erase bit mask. */
#define NVM_FUSES_EESAVE_bp  3  /* Preserve EEPROM Through Chip Erase bit position. */

#define NVM_FUSES_BODLVL_gm  0x07  /* Brownout Detection Voltage Level group mask. */
#define NVM_FUSES_BODLVL_gp  0  /* Brownout Detection Voltage Level group position. */
#define NVM_FUSES_BODLVL0_bm  (1<<0)  /* Brownout Detection Voltage Level bit 0 mask. */
#define NVM_FUSES_BODLVL0_bp  0  /* Brownout Detection Voltage Level bit 0 position. */
#define NVM_FUSES_BODLVL1_bm  (1<<1)  /* Brownout Detection Voltage Level bit 1 mask. */
#define NVM_FUSES_BODLVL1_bp  1  /* Brownout Detection Voltage Level bit 1 position. */
#define NVM_FUSES_BODLVL2_bm  (1<<2)  /* Brownout Detection Voltage Level bit 2 mask. */
#define NVM_FUSES_BODLVL2_bp  2  /* Brownout Detection Voltage Level bit 2 position. */

/* LOCKBIT - Fuses and Lockbits */
/* NVM_LOCKBITS.LOCKBITS  bit masks and bit positions */
#define NVM_LOCKBITS_BLBB_gm  0xC0  /* Boot Lock Bits - Boot Section group mask. */
#define NVM_LOCKBITS_BLBB_gp  6  /* Boot Lock Bits - Boot Section group position. */
#define NVM_LOCKBITS_BLBB0_bm  (1<<6)  /* Boot Lock Bits - Boot Section bit 0 mask. */
#define NVM_LOCKBITS_BLBB0_bp  6  /* Boot Lock Bits - Boot Section bit 0 position. */
#define NVM_LOCKBITS_BLBB1_bm  (1<<7)  /* Boot Lock Bits - Boot Section bit 1 mask. */
#define NVM_LOCKBITS_BLBB1_bp  7  /* Boot Lock Bits - Boot Section bit 1 position. */

#define NVM_LOCKBITS_BLBA_gm  0x30  /* Boot Lock Bits - Application Section group mask. */
#define NVM_LOCKBITS_BLBA_gp  4  /* Boot Lock Bits - Application Section group position. */
#define NVM_LOCKBITS_BLBA0_bm  (1<<4)  /* Boot Lock Bits - Application Section bit 0 mask. */
#define NVM_LOCKBITS_BLBA0_bp  4  /* Boot Lock Bits - Application Section bit 0 position. */
#define NVM_LOCKBITS_BLBA1_bm  (1<<5)  /* Boot Lock Bits - Application Section bit 1 mask. */
#define NVM_LOCKBITS_BLBA1_bp  5  /* Boot Lock Bits - Application Section bit 1 position. */

#define NVM_LOCKBITS_BLBAT_gm  0x0C  /* Boot Lock Bits - Application Table group mask. */
#define NVM_LOCKBITS_BLBAT_gp  2  /* Boot Lock Bits - Application Table group position. */
#define NVM_LOCKBITS_BLBAT0_bm  (1<<2)  /* Boot Lock Bits - Application Table bit 0 mask. */
#define NVM_LOCKBITS_BLBAT0_bp  2  /* Boot Lock Bits - Application Table bit 0 position. */
#define NVM_LOCKBITS_BLBAT1_bm  (1<<3)  /* Boot Lock Bits - Application Table bit 1 mask. */
#define NVM_LOCKBITS_BLBAT1_bp  3  /* Boot Lock Bits - Application Table bit 1 position. */

#define NVM_LOCKBITS_LB_gm  0x03  /* Lock Bits group mask. */
#define NVM_LOCKBITS_LB_gp  0  /* Lock Bits group position. */
#define NVM_LOCKBITS_LB0_bm  (1<<0)  /* Lock Bits bit 0 mask. */
#define NVM_LOCKBITS_LB0_bp  0  /* Lock Bits bit 0 position. */
#define NVM_LOCKBITS_LB1_bm  (1<<1)  /* Lock Bits bit 1 mask. */
#define NVM_LOCKBITS_LB1_bp  1  /* Lock Bits bit 1 position. */



// Generic Port Pins

#define PIN0_bm 0x01
#define PIN0_bp 0
#define PIN1_bm 0x02
#define PIN1_bp 1
#define PIN2_bm 0x04
#define PIN2_bp 2
#define PIN3_bm 0x08
#define PIN3_bp 3
#define PIN4_bm 0x10
#define PIN4_bp 4
#define PIN5_bm 0x20
#define PIN5_bp 5
#define PIN6_bm 0x40
#define PIN6_bp 6
#define PIN7_bm 0x80
#define PIN7_bp 7

/* ========== Interrupt Vector Definitions ========== */
/* Vector 0 is the reset vector */

/* OSC interrupt vectors */
#define OSC_OSCF_vect_num  1
#define OSC_OSCF_vect      _VECTOR(1)  /* Oscillator Failure Interrupt (NMI) */

/* PORTC interrupt vectors */
#define PORTC_INT0_vect_num  2
#define PORTC_INT0_vect      _VECTOR(2)  /* External Interrupt 0 */
#define PORTC_INT1_vect_num  3
#define PORTC_INT1_vect      _VECTOR(3)  /* External Interrupt 1 */

/* PORTR interrupt vectors */
#define PORTR_INT0_vect_num  4
#define PORTR_INT0_vect      _VECTOR(4)  /* External Interrupt 0 */
#define PORTR_INT1_vect_num  5
#define PORTR_INT1_vect      _VECTOR(5)  /* External Interrupt 1 */

/* DMA interrupt vectors */
#define DMA_CH0_vect_num  6
#define DMA_CH0_vect      _VECTOR(6)  /* Channel 0 Interrupt */
#define DMA_CH1_vect_num  7
#define DMA_CH1_vect      _VECTOR(7)  /* Channel 1 Interrupt */

/* RTC interrupt vectors */
#define RTC_OVF_vect_num  10
#define RTC_OVF_vect      _VECTOR(10)  /* Overflow Interrupt */
#define RTC_COMP_vect_num  11
#define RTC_COMP_vect      _VECTOR(11)  /* Compare Interrupt */

/* TWIC interrupt vectors */
#define TWIC_TWIS_vect_num  12
#define TWIC_TWIS_vect      _VECTOR(12)  /* TWI Slave Interrupt */
#define TWIC_TWIM_vect_num  13
#define TWIC_TWIM_vect      _VECTOR(13)  /* TWI Master Interrupt */

/* TCC0 interrupt vectors */
#define TCC0_OVF_vect_num  14
#define TCC0_OVF_vect      _VECTOR(14)  /* Overflow Interrupt */

/* TCC2 interrupt vectors */
#define TCC2_LUNF_vect_num  14
#define TCC2_LUNF_vect      _VECTOR(14)  /* Low Byte Underflow Interrupt */

/* TCC0 interrupt vectors */
#define TCC0_ERR_vect_num  15
#define TCC0_ERR_vect      _VECTOR(15)  /* Error Interrupt */

/* TCC2 interrupt vectors */
#define TCC2_HUNF_vect_num  15
#define TCC2_HUNF_vect      _VECTOR(15)  /* High Byte Underflow Interrupt */

/* TCC0 interrupt vectors */
#define TCC0_CCA_vect_num  16
#define TCC0_CCA_vect      _VECTOR(16)  /* Compare or Capture A Interrupt */

/* TCC2 interrupt vectors */
#define TCC2_LCMPA_vect_num  16
#define TCC2_LCMPA_vect      _VECTOR(16)  /* Low Byte Compare A Interrupt */

/* TCC0 interrupt vectors */
#define TCC0_CCB_vect_num  17
#define TCC0_CCB_vect      _VECTOR(17)  /* Compare or Capture B Interrupt */

/* TCC2 interrupt vectors */
#define TCC2_LCMPB_vect_num  17
#define TCC2_LCMPB_vect      _VECTOR(17)  /* Low Byte Compare B Interrupt */

/* TCC0 interrupt vectors */
#define TCC0_CCC_vect_num  18
#define TCC0_CCC_vect      _VECTOR(18)  /* Compare or Capture C Interrupt */

/* TCC2 interrupt vectors */
#define TCC2_LCMPC_vect_num  18
#define TCC2_LCMPC_vect      _VECTOR(18)  /* Low Byte Compare C Interrupt */

/* TCC0 interrupt vectors */
#define TCC0_CCD_vect_num  19
#define TCC0_CCD_vect      _VECTOR(19)  /* Compare or Capture D Interrupt */

/* TCC2 interrupt vectors */
#define TCC2_LCMPD_vect_num  19
#define TCC2_LCMPD_vect      _VECTOR(19)  /* Low Byte Compare D Interrupt */

/* TCC1 interrupt vectors */
#define TCC1_OVF_vect_num  20
#define TCC1_OVF_vect      _VECTOR(20)  /* Overflow Interrupt */
#define TCC1_ERR_vect_num  21
#define TCC1_ERR_vect      _VECTOR(21)  /* Error Interrupt */
#define TCC1_CCA_vect_num  22
#define TCC1_CCA_vect      _VECTOR(22)  /* Compare or Capture A Interrupt */
#define TCC1_CCB_vect_num  23
#define TCC1_CCB_vect      _VECTOR(23)  /* Compare or Capture B Interrupt */

/* SPIC interrupt vectors */
#define SPIC_INT_vect_num  24
#define SPIC_INT_vect      _VECTOR(24)  /* SPI Interrupt */

/* USARTC0 interrupt vectors */
#define USARTC0_RXC_vect_num  25
#define USARTC0_RXC_vect      _VECTOR(25)  /* Reception Complete Interrupt */
#define USARTC0_DRE_vect_num  26
#define USARTC0_DRE_vect      _VECTOR(26)  /* Data Register Empty Interrupt */
#define USARTC0_TXC_vect_num  27
#define USARTC0_TXC_vect      _VECTOR(27)  /* Transmission Complete Interrupt */

/* USB interrupt vectors */
#define USB_BUSEVENT_vect_num  31
#define USB_BUSEVENT_vect      _VECTOR(31)  /* SOF, suspend, resume, reset bus event interrupts, crc, underflow, overflow and stall error interrupts */
#define USB_TRNCOMPL_vect_num  32
#define USB_TRNCOMPL_vect      _VECTOR(32)  /* Transaction complete interrupt */

/* LCD interrupt vectors */
#define LCD_INT_vect_num  35
#define LCD_INT_vect      _VECTOR(35)  /* LCD Interrupt */

/* AES interrupt vectors */
#define AES_INT_vect_num  36
#define AES_INT_vect      _VECTOR(36)  /* AES Interrupt */

/* NVM interrupt vectors */
#define NVM_EE_vect_num  37
#define NVM_EE_vect      _VECTOR(37)  /* EE Interrupt */
#define NVM_SPM_vect_num  38
#define NVM_SPM_vect      _VECTOR(38)  /* SPM Interrupt */

/* PORTB interrupt vectors */
#define PORTB_INT0_vect_num  39
#define PORTB_INT0_vect      _VECTOR(39)  /* External Interrupt 0 */
#define PORTB_INT1_vect_num  40
#define PORTB_INT1_vect      _VECTOR(40)  /* External Interrupt 1 */

/* ACB interrupt vectors */
#define ACB_AC0_vect_num  41
#define ACB_AC0_vect      _VECTOR(41)  /* AC0 Interrupt */
#define ACB_AC1_vect_num  42
#define ACB_AC1_vect      _VECTOR(42)  /* AC1 Interrupt */
#define ACB_ACW_vect_num  43
#define ACB_ACW_vect      _VECTOR(43)  /* ACW Window Mode Interrupt */

/* ADCB interrupt vectors */
#define ADCB_CH0_vect_num  44
#define ADCB_CH0_vect      _VECTOR(44)  /* Interrupt 0 */

/* PORTD interrupt vectors */
#define PORTD_INT0_vect_num  48
#define PORTD_INT0_vect      _VECTOR(48)  /* External Interrupt 0 */
#define PORTD_INT1_vect_num  49
#define PORTD_INT1_vect      _VECTOR(49)  /* External Interrupt 1 */

/* PORTG interrupt vectors */
#define PORTG_INT0_vect_num  50
#define PORTG_INT0_vect      _VECTOR(50)  /* External Interrupt 0 */
#define PORTG_INT1_vect_num  51
#define PORTG_INT1_vect      _VECTOR(51)  /* External Interrupt 1 */

/* PORTM interrupt vectors */
#define PORTM_INT0_vect_num  52
#define PORTM_INT0_vect      _VECTOR(52)  /* External Interrupt 0 */
#define PORTM_INT1_vect_num  53
#define PORTM_INT1_vect      _VECTOR(53)  /* External Interrupt 1 */

/* PORTE interrupt vectors */
#define PORTE_INT0_vect_num  54
#define PORTE_INT0_vect      _VECTOR(54)  /* External Interrupt 0 */
#define PORTE_INT1_vect_num  55
#define PORTE_INT1_vect      _VECTOR(55)  /* External Interrupt 1 */

/* TCE0 interrupt vectors */
#define TCE0_OVF_vect_num  58
#define TCE0_OVF_vect      _VECTOR(58)  /* Overflow Interrupt */

/* TCE2 interrupt vectors */
#define TCE2_LUNF_vect_num  58
#define TCE2_LUNF_vect      _VECTOR(58)  /* Low Byte Underflow Interrupt */

/* TCE0 interrupt vectors */
#define TCE0_ERR_vect_num  59
#define TCE0_ERR_vect      _VECTOR(59)  /* Error Interrupt */

/* TCE2 interrupt vectors */
#define TCE2_HUNF_vect_num  59
#define TCE2_HUNF_vect      _VECTOR(59)  /* High Byte Underflow Interrupt */

/* TCE0 interrupt vectors */
#define TCE0_CCA_vect_num  60
#define TCE0_CCA_vect      _VECTOR(60)  /* Compare or Capture A Interrupt */

/* TCE2 interrupt vectors */
#define TCE2_LCMPA_vect_num  60
#define TCE2_LCMPA_vect      _VECTOR(60)  /* Low Byte Compare A Interrupt */

/* TCE0 interrupt vectors */
#define TCE0_CCB_vect_num  61
#define TCE0_CCB_vect      _VECTOR(61)  /* Compare or Capture B Interrupt */

/* TCE2 interrupt vectors */
#define TCE2_LCMPB_vect_num  61
#define TCE2_LCMPB_vect      _VECTOR(61)  /* Low Byte Compare B Interrupt */

/* TCE0 interrupt vectors */
#define TCE0_CCC_vect_num  62
#define TCE0_CCC_vect      _VECTOR(62)  /* Compare or Capture C Interrupt */

/* TCE2 interrupt vectors */
#define TCE2_LCMPC_vect_num  62
#define TCE2_LCMPC_vect      _VECTOR(62)  /* Low Byte Compare C Interrupt */

/* TCE0 interrupt vectors */
#define TCE0_CCD_vect_num  63
#define TCE0_CCD_vect      _VECTOR(63)  /* Compare or Capture D Interrupt */

/* TCE2 interrupt vectors */
#define TCE2_LCMPD_vect_num  63
#define TCE2_LCMPD_vect      _VECTOR(63)  /* Low Byte Compare D Interrupt */

/* USARTE0 interrupt vectors */
#define USARTE0_RXC_vect_num  69
#define USARTE0_RXC_vect      _VECTOR(69)  /* Reception Complete Interrupt */
#define USARTE0_DRE_vect_num  70
#define USARTE0_DRE_vect      _VECTOR(70)  /* Data Register Empty Interrupt */
#define USARTE0_TXC_vect_num  71
#define USARTE0_TXC_vect      _VECTOR(71)  /* Transmission Complete Interrupt */

/* PORTA interrupt vectors */
#define PORTA_INT0_vect_num  75
#define PORTA_INT0_vect      _VECTOR(75)  /* External Interrupt 0 */
#define PORTA_INT1_vect_num  76
#define PORTA_INT1_vect      _VECTOR(76)  /* External Interrupt 1 */

/* ACA interrupt vectors */
#define ACA_AC0_vect_num  77
#define ACA_AC0_vect      _VECTOR(77)  /* AC0 Interrupt */
#define ACA_AC1_vect_num  78
#define ACA_AC1_vect      _VECTOR(78)  /* AC1 Interrupt */
#define ACA_ACW_vect_num  79
#define ACA_ACW_vect      _VECTOR(79)  /* ACW Window Mode Interrupt */

/* ADCA interrupt vectors */
#define ADCA_CH0_vect_num  80
#define ADCA_CH0_vect      _VECTOR(80)  /* Interrupt 0 */

#define _VECTOR_SIZE 4 /* Size of individual vector. */
#define _VECTORS_SIZE (81 * _VECTOR_SIZE)


/* ========== Constants ========== */

#define PROGMEM_START     (0x0000)
#define PROGMEM_SIZE      (139264)
#define PROGMEM_END       (PROGMEM_START + PROGMEM_SIZE - 1)

#define APP_SECTION_START     (0x0000)
#define APP_SECTION_SIZE      (131072)
#define APP_SECTION_PAGE_SIZE (256)
#define APP_SECTION_END       (APP_SECTION_START + APP_SECTION_SIZE - 1)

#define APPTABLE_SECTION_START     (0x1E000)
#define APPTABLE_SECTION_SIZE      (8192)
#define APPTABLE_SECTION_PAGE_SIZE (256)
#define APPTABLE_SECTION_END       (APPTABLE_SECTION_START + APPTABLE_SECTION_SIZE - 1)

#define BOOT_SECTION_START     (0x20000)
#define BOOT_SECTION_SIZE      (8192)
#define BOOT_SECTION_PAGE_SIZE (256)
#define BOOT_SECTION_END       (BOOT_SECTION_START + BOOT_SECTION_SIZE - 1)

#define DATAMEM_START     (0x0000)
#define DATAMEM_SIZE      (16384)
#define DATAMEM_END       (DATAMEM_START + DATAMEM_SIZE - 1)

#define IO_START     (0x0000)
#define IO_SIZE      (4096)
#define IO_PAGE_SIZE (0)
#define IO_END       (IO_START + IO_SIZE - 1)

#define MAPPED_EEPROM_START     (0x1000)
#define MAPPED_EEPROM_SIZE      (2048)
#define MAPPED_EEPROM_PAGE_SIZE (0)
#define MAPPED_EEPROM_END       (MAPPED_EEPROM_START + MAPPED_EEPROM_SIZE - 1)

#define INTERNAL_SRAM_START     (0x2000)
#define INTERNAL_SRAM_SIZE      (8192)
#define INTERNAL_SRAM_PAGE_SIZE (0)
#define INTERNAL_SRAM_END       (INTERNAL_SRAM_START + INTERNAL_SRAM_SIZE - 1)

#define EEPROM_START     (0x0000)
#define EEPROM_SIZE      (2048)
#define EEPROM_PAGE_SIZE (32)
#define EEPROM_END       (EEPROM_START + EEPROM_SIZE - 1)

#define SIGNATURES_START     (0x0000)
#define SIGNATURES_SIZE      (3)
#define SIGNATURES_PAGE_SIZE (0)
#define SIGNATURES_END       (SIGNATURES_START + SIGNATURES_SIZE - 1)

#define FUSES_START     (0x0000)
#define FUSES_SIZE      (6)
#define FUSES_PAGE_SIZE (0)
#define FUSES_END       (FUSES_START + FUSES_SIZE - 1)

#define LOCKBITS_START     (0x0000)
#define LOCKBITS_SIZE      (1)
#define LOCKBITS_PAGE_SIZE (0)
#define LOCKBITS_END       (LOCKBITS_START + LOCKBITS_SIZE - 1)

#define USER_SIGNATURES_START     (0x0000)
#define USER_SIGNATURES_SIZE      (256)
#define USER_SIGNATURES_PAGE_SIZE (256)
#define USER_SIGNATURES_END       (USER_SIGNATURES_START + USER_SIGNATURES_SIZE - 1)

#define PROD_SIGNATURES_START     (0x0000)
#define PROD_SIGNATURES_SIZE      (52)
#define PROD_SIGNATURES_PAGE_SIZE (256)
#define PROD_SIGNATURES_END       (PROD_SIGNATURES_START + PROD_SIGNATURES_SIZE - 1)

#define FLASHSTART   PROGMEM_START
#define FLASHEND     PROGMEM_END
#define SPM_PAGESIZE 256
#define RAMSTART     INTERNAL_SRAM_START
#define RAMSIZE      INTERNAL_SRAM_SIZE
#define RAMEND       INTERNAL_SRAM_END
#define E2END        EEPROM_END
#define E2PAGESIZE   EEPROM_PAGE_SIZE


/* ========== Fuses ========== */
#define FUSE_MEMORY_SIZE 6

/* Fuse Byte 0 */
#define FUSE_JTAGUSERID0  (unsigned char)~_BV(0)  /* JTAG User ID Bit 0 */
#define FUSE_JTAGUSERID1  (unsigned char)~_BV(1)  /* JTAG User ID Bit 1 */
#define FUSE_JTAGUSERID2  (unsigned char)~_BV(2)  /* JTAG User ID Bit 2 */
#define FUSE_JTAGUSERID3  (unsigned char)~_BV(3)  /* JTAG User ID Bit 3 */
#define FUSE_JTAGUSERID4  (unsigned char)~_BV(4)  /* JTAG User ID Bit 4 */
#define FUSE_JTAGUSERID5  (unsigned char)~_BV(5)  /* JTAG User ID Bit 5 */
#define FUSE_JTAGUSERID6  (unsigned char)~_BV(6)  /* JTAG User ID Bit 6 */
#define FUSE_JTAGUSERID7  (unsigned char)~_BV(7)  /* JTAG User ID Bit 7 */
#define FUSE0_DEFAULT  (0xFF)

/* Fuse Byte 1 */
#define FUSE_WDP0  (unsigned char)~_BV(0)  /* Watchdog Timeout Period Bit 0 */
#define FUSE_WDP1  (unsigned char)~_BV(1)  /* Watchdog Timeout Period Bit 1 */
#define FUSE_WDP2  (unsigned char)~_BV(2)  /* Watchdog Timeout Period Bit 2 */
#define FUSE_WDP3  (unsigned char)~_BV(3)  /* Watchdog Timeout Period Bit 3 */
#define FUSE_WDWP0  (unsigned char)~_BV(4)  /* Watchdog Window Timeout Period Bit 0 */
#define FUSE_WDWP1  (unsigned char)~_BV(5)  /* Watchdog Window Timeout Period Bit 1 */
#define FUSE_WDWP2  (unsigned char)~_BV(6)  /* Watchdog Window Timeout Period Bit 2 */
#define FUSE_WDWP3  (unsigned char)~_BV(7)  /* Watchdog Window Timeout Period Bit 3 */
#define FUSE1_DEFAULT  (0xFF)

/* Fuse Byte 2 */
#define FUSE_BODPD0  (unsigned char)~_BV(0)  /* BOD Operation in Power-Down Mode Bit 0 */
#define FUSE_BODPD1  (unsigned char)~_BV(1)  /* BOD Operation in Power-Down Mode Bit 1 */
#define FUSE_TOSCSEL  (unsigned char)~_BV(5)  /* Timer Oscillator pin location */
#define FUSE_BOOTRST  (unsigned char)~_BV(6)  /* Boot Loader Section Reset Vector */
#define FUSE2_DEFAULT  (0xFF)

/* Fuse Byte 3 Reserved */

/* Fuse Byte 4 */
#define FUSE_JTAGEN  (unsigned char)~_BV(0)  /* JTAG Interface Enable */
#define FUSE_WDLOCK  (unsigned char)~_BV(1)  /* Watchdog Timer Lock */
#define FUSE_SUT0  (unsigned char)~_BV(2)  /* Start-up Time Bit 0 */
#define FUSE_SUT1  (unsigned char)~_BV(3)  /* Start-up Time Bit 1 */
#define FUSE_RSTDISBL  (unsigned char)~_BV(4)  /* External Reset Disable */
#define FUSE4_DEFAULT  (0xFF)

/* Fuse Byte 5 */
#define FUSE_BODLVL0  (unsigned char)~_BV(0)  /* Brownout Detection Voltage Level Bit 0 */
#define FUSE_BODLVL1  (unsigned char)~_BV(1)  /* Brownout Detection Voltage Level Bit 1 */
#define FUSE_BODLVL2  (unsigned char)~_BV(2)  /* Brownout Detection Voltage Level Bit 2 */
#define FUSE_EESAVE  (unsigned char)~_BV(3)  /* Preserve EEPROM Through Chip Erase */
#define FUSE_BODACT0  (unsigned char)~_BV(4)  /* BOD Operation in Active Mode Bit 0 */
#define FUSE_BODACT1  (unsigned char)~_BV(5)  /* BOD Operation in Active Mode Bit 1 */
#define FUSE5_DEFAULT  (0xFF)

/* ========== Lock Bits ========== */
#define __LOCK_BITS_EXIST
#define __BOOT_LOCK_APPLICATION_TABLE_BITS_EXIST
#define __BOOT_LOCK_APPLICATION_BITS_EXIST
#define __BOOT_LOCK_BOOT_BITS_EXIST

/* ========== Signature ========== */
#define SIGNATURE_0 0x1E
#define SIGNATURE_1 0x97
#define SIGNATURE_2 0x4D


#endif /* #ifdef _AVR_ATXMEGA128B1_H_INCLUDED */

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /* Copyright (c) 2009-2010 Atmel Corporation
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.

   * Neither the name of the copyright holders nor the names of
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE. */

/* $Id: iox256a3b.h 2200 2010-12-14 04:24:24Z arcanum $ */

/* avr/iox256a3b.h - definitions for ATxmega256A3B */

/* This file should only be included from <avr/io.h>, never directly. */

#ifndef _AVR_IO_H_
#  error "Include <avr/io.h> instead of this file."
#endif

#ifndef _AVR_IOXXX_H_
#  define _AVR_IOXXX_H_ "iox256a3b.h"
#else
#  error "Attempt to include more than one <avr/ioXXX.h> file."
#endif 


#ifndef _AVR_ATxmega256A3B_H_
#define _AVR_ATxmega256A3B_H_ 1


/* Ungrouped common registers */
#define GPIOR0  _SFR_MEM8(0x0000)  /* General Purpose IO Register 0 */
#define GPIOR1  _SFR_MEM8(0x0001)  /* General Purpose IO Register 1 */
#define GPIOR2  _SFR_MEM8(0x0002)  /* General Purpose IO Register 2 */
#define GPIOR3  _SFR_MEM8(0x0003)  /* General Purpose IO Register 3 */
#define GPIOR4  _SFR_MEM8(0x0004)  /* General Purpose IO Register 4 */
#define GPIOR5  _SFR_MEM8(0x0005)  /* General Purpose IO Register 5 */
#define GPIOR6  _SFR_MEM8(0x0006)  /* General Purpose IO Register 6 */
#define GPIOR7  _SFR_MEM8(0x0007)  /* General Purpose IO Register 7 */
#define GPIOR8  _SFR_MEM8(0x0008)  /* General Purpose IO Register 8 */
#define GPIOR9  _SFR_MEM8(0x0009)  /* General Purpose IO Register 9 */
#define GPIORA  _SFR_MEM8(0x000A)  /* General Purpose IO Register 10 */
#define GPIORB  _SFR_MEM8(0x000B)  /* General Purpose IO Register 11 */
#define GPIORC  _SFR_MEM8(0x000C)  /* General Purpose IO Register 12 */
#define GPIORD  _SFR_MEM8(0x000D)  /* General Purpose IO Register 13 */
#define GPIORE  _SFR_MEM8(0x000E)  /* General Purpose IO Register 14 */
#define GPIORF  _SFR_MEM8(0x000F)  /* General Purpose IO Register 15 */

/* Deprecated*/
#define GPIO0  _SFR_MEM8(0x0000)  /* General Purpose IO Register 0 */
#define GPIO1  _SFR_MEM8(0x0001)  /* General Purpose IO Register 1 */
#define GPIO2  _SFR_MEM8(0x0002)  /* General Purpose IO Register 2 */
#define GPIO3  _SFR_MEM8(0x0003)  /* General Purpose IO Register 3 */
#define GPIO4  _SFR_MEM8(0x0004)  /* General Purpose IO Register 4 */
#define GP